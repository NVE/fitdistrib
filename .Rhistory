#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
test <- gl_mom(random_distrib)
test_that("gl_mom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_mom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
test <- gl_mom(random_distrib)
test_that("gl_mom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_mom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
test <- gl_mom(random_distrib)
test_that("gl_mom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_mom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
param <- c(22, 4.5, -0.3)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- nsRFA::rand.genlogis(1000, param[1],param[2], param[3])
####
test <- gl_mle(random_distrib)
test_that("gl_mle return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_mle returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
# There is aproblem with the 3rd parameter returned by gl_mle which is 0.1 instead of -0.3
# Warning: Maybe a different distribution formulation?
# expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
####
test <- gl_Lmom(random_distrib)
test_that("gl_Lmom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_Lmom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
####
test <- gl_mom(random_distrib)
test_that("gl_mom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_mom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
# 3rd estimated parameter is negative but not very accurate...
# expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
test <- gumbel_mle(test_data)
param <- c(20, 6.6)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- evd::rgumbel(1000, loc=param[1], scale=param[2])
####
test <- gumbel_mle(random_distrib)
test_that("gumbel_mle return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gumbel_mle returns reasonable estimates", {
expected_min <- param * (1 - CI * test$se)
expected_max <- param * (1 + CI * test$se)
#   expected_min <- param * (1 - 0.2)
#   expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
####
test <- gumbel_Lmom(random_distrib)
test_that("gumbel_Lmom return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gumbel_Lmom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
####
test <- gumbel_mom(random_distrib)
test_that("gumbel_Lmom return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gumbel_Lmom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
# Testing the GUMBEL functions
# Problem: the function gumbel_Lmom and gumbel_mom do not return the standard error
# So the 95% confidence interval was replaced by +-20% accuracy
param <- c(20, 6.6)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- evd::rgumbel(1000, loc=param[1], scale=param[2])
####
test <- gumbel_mle(random_distrib)
test_that("gumbel_mle return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gumbel_mle returns reasonable estimates", {
expected_min <- param * (1 - CI * test$se)
expected_max <- param * (1 + CI * test$se)
#   expected_min <- param * (1 - 0.2)
#   expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
####
test <- gumbel_Lmom(random_distrib)
test_that("gumbel_Lmom return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gumbel_Lmom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
####
test <- gumbel_mom(random_distrib)
test_that("gumbel_Lmom return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gumbel_Lmom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
param <- c(22, 4.5, -0.3)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- nsRFA::rand.genlogis(1000, param[1],param[2], param[3])
####
test <- gl_mle(random_distrib)
test_that("gl_mle return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_mle returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
# There is aproblem with the 3rd parameter returned by gl_mle which is 0.1 instead of -0.3
# Warning: Maybe a different distribution formulation?
# expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
####
test <- gl_Lmom(random_distrib)
test_that("gl_Lmom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_Lmom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
####
test <- gl_mom(random_distrib)
test_that("gl_mom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gl_mom returns reasonable estimates", {
#    expected_min <- param * (1 - CI * test$se)
#    expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
# 3rd estimated parameter is negative but not very accurate...
# expect_true(test$estimate[3] < expected_min[3]  && test$estimate[3] > expected_max[3])  # Test is the other way around because param is < 0
})
param <- c(9.5, 6, 2.5)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- nsRFA::rand.gamma(1000, param[1],param[2],param[3])
#####
test <- pearson_mle(random_distrib)
test_that("pearson_mle return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("pearson_mle returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_max[3]  && test$estimate[3] > expected_min[3])
})
#####
test <- pearson_Lmom(random_distrib)
test_that("pearson_Lmom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("pearson_Lmom returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_max[3]  && test$estimate[3] > expected_min[3])
})
####
test <- pearson_mom(random_distrib)
test_that("pearson_mom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("pearson_mom returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_max[3]  && test$estimate[3] > expected_min[3])
})
# Testing the GEV functions
# The tests should ideally be done on 20 random samples and 19 of them should pass.
# Problem: the functions gev_Lmom and gev_mom do not return the standard error
# So the 95% confidence interval was replaced by +-20% accuracy
param <- c(20, 6.3, 0.12)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- evd::rgev(1000, loc=param[1], scale=param[2], shape=param[3])
#####
test <- gev_mle(random_distrib)
test_that("gev_mle return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gev_mle returns reasonable estimates", {
expected_min <- param * (1 - CI * test$se)
expected_max <- param * (1 + CI * test$se)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_max[3]  && test$estimate[3] > expected_min[3])
})
param <- c(20, 6.3, 0.12)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- evd::rgev(1000, loc=param[1], scale=param[2], shape=param[3])
#####
test <- gev_mle(random_distrib)
test_that("gev_mle return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gev_mle returns reasonable estimates", {
expected_min <- param * (1 - CI * test$se)
expected_max <- param * (1 + CI * test$se)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
# The estimation of the shape parameter isn't bad but often fails the CI test
# expect_true(test$estimate[3] < expected_max[3]  && test$estimate[3] > expected_min[3])
})
test <- gev_Lmom(random_distrib)
test_that("gev_Lmom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gev_Lmom returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
expect_true(test$estimate[3] < expected_max[3]  && test$estimate[3] > expected_min[3])
})
test <- gev_mom(random_distrib)
test_that("gev_mom return list of correct length", {
expect_length(test$estimate, 3)
expect_length(test$se, 3)
})
test_that("gev_mom returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
# The shape parameter is often the worst estimated
# expect_true(test$estimate[3] < expected_max[3]  && test$estimate[3] > expected_min[3])
})
test <- gamma_mle(test_data)
param <- c(7.6, 0.3)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- rgamma(1000, shape=param[1], scale=param[2])
####
test <- gamma_mle(random_distrib)
test_that("gamma_mle return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gamma_mle returns reasonable estimates", {
expected_min <- param * (1 - CI * test$se)
expected_max <- param * (1 + CI * test$se)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
####
test <- gamma_Lmom(random_distrib)
test_that("gamma_Lmom return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gamma_Lmom returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
test <- gamma_mle(test_data)
param <- c(7.6, 0.3)  # Approximate parameters taken from the fit of the Narsjo "2.11" station data
CI <- 2  # +-2 times the Std_error to get 95% confidence interval
random_distrib <- rgamma(1000, shape=param[1], scale=param[2])
####
test <- gamma_mle(random_distrib)
test_that("gamma_mle return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gamma_mle returns reasonable estimates", {
expected_min <- param * (1 - CI * test$se)
expected_max <- param * (1 + CI * test$se)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
# Not great estimation of second parameter...
# There is maybe a hidden problem as both mle and Lmom return
# expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
####
test <- gamma_Lmom(random_distrib)
test_that("gamma_Lmom return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gamma_Lmom returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
# expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
####
test <- gamma_mom(random_distrib)
test_that("gamma_Lmom return list of correct length", {
expect_length(test$estimate, 2)
expect_length(test$se, 2)
})
test_that("gamma_Lmom returns reasonable estimates", {
#   expected_min <- param * (1 - CI * test$se)
#   expected_max <- param * (1 + CI * test$se)
expected_min <- param * (1 - 0.2)
expected_max <- param * (1 + 0.2)
expect_true(test$estimate[1] < expected_max[1]  && test$estimate[1] > expected_min[1])
expect_true(test$estimate[2] < expected_max[2]  && test$estimate[2] > expected_min[2])
})
test_data
save(test_data, "test_data.rda")
save(test_data, file="test_data.rda")
load("C:/Users/flbk/Documents/GitHub/fitdistrib/data/x.rda")
gamma_mom(test_data)
gumbel_bayes(test_data)
library(devtools)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::document()
library(fitdistrib)
library(FlomKart)
library(FlomKart)
estimate = gev_mle(test_data)
plot_density(test_data, param = estimate, distr = "gev")
library(fitdistrib)
library(FlomKart)
estimate = gev_mle(test_data)
plot_density(test_data, param = estimate, distr = "gev")
packagedocs::init_vignettes()
packagedocs::build_vignettes()
devtools::document()
packagedocs::build_vignettes()
library(FlomKart)
estimate = gev_bayes(test_data)
plot_density(test_data, param = estimate, distr = "gev")
library(FlomKart)
#' estimate = pearson_bayes(test_data)
#' plot_density(test_data, param = estimate, distr = "pearson")
library(FlomKart)
estimate = pearson_bayes(test_data)
plot_density(test_data, param = estimate, distr = "pearson")
plot_density
library(FlomKart)
estimate = gl_bayes(test_data)
plot_density(test_data, param = estimate, distr = "gl")
library(FlomKart)
estimate = gamma_mle(test_data)
plot_density(test_data, param = estimate, distr = "gamma")
library(FlomKart)
estimate = gumbel_mle(test_data)
plot_density(test_data, param = estimate, distr = "gumbel")
devtools::document()
packagedocs::build_vignettes()
packagedocs::build_vignettes()
packagedocs::build_vignettes()
packagedocs::build_vignettes()
packagedocs::build_vignettes()
devtools::document()
devtools::document()
library(fitdistrib)
packagedocs::build_vignettes()
packagedocs::build_vignettes()
packagedocs::build_vignettes()
devtools::document()
library(fitdistrib)
packagedocs::build_vignettes()
library(knitr)
library(markdown)
knit("example.Rmd")  # produces the md file
pandoc("example.md", format = "docx")  # converts md file into docx
install_github("slidify", "ramnathv", ref="dev")
library(devtools)
install_github("slidify", "ramnathv", ref="dev")
install_github("slidifyLibraries", "ramnathv", ref="dev")
library(devtools)
devtools::document()
library(fitdistrib)
devtools::test()
devtools::test()
?gl_mle
library(FlomKartShinyApp)
estimate = gl_mle(test_data)
FlomKartShinyApp::plot4server(test_data, param = estimate$estimate, distr = 4)
